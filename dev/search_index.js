var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FiniteDifferenceMatrices","category":"page"},{"location":"#FiniteDifferenceMatrices.jl","page":"Home","title":"FiniteDifferenceMatrices.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Stable) (Image: Dev)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for discrete approximations of differential operators","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run the following code on the to install this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(url=\"https://github.com/ohno/FiniteDifferenceMatrices.jl.git\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run the following code before each use.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using FiniteDifferenceMatrices","category":"page"},{"location":"","page":"Home","title":"Home","text":"A central finite difference of the second-order derivative is","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracmathrmd^2f(x)mathrmd x^2 = fracf(x+Delta x) - 2f(x) + f(x-Delta x)Delta x^2 + O(Delta x^2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fdcoefficient(n=2, m=2, d=:c)\nDict{Int64, Rational{Int64}} with 3 entries:\n  0  => -2//1\n  -1 => 1//1\n  1  => 1//1","category":"page"},{"location":"","page":"Home","title":"Home","text":"A discrete approximation of the second-order differential operator is","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracmathrmd^2mathrmd x^2\nsimeq\nfrac1Delta x^2\nleft(beginarrayccccccc\n  -2   1   0  ldots  0  0  0 \n   1  -2   1  ldots  0  0  0 \n   0   1  -2  ldots  0  0  0 \n  vdots  vdots  vdots  ddots  vdots  vdots  vdots \n  0  0  0  ldots  -2   1   0 \n  0  0  0  ldots   1  -2   1 \n  0  0  0  ldots   0   1  -2\nendarrayright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fdmatrix(5, n=2, m=2, d=:c, h=1//1)\n5×5 SparseArrays.SparseMatrixCSC{Rational{Int64}, Int64} with 13 stored entries:\n -2//1   1//1    ⋅      ⋅      ⋅  \n  1//1  -2//1   1//1    ⋅      ⋅  \n   ⋅     1//1  -2//1   1//1    ⋅  \n   ⋅      ⋅     1//1  -2//1   1//1\n   ⋅      ⋅      ⋅     1//1  -2//1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please see the API reference for details and more examples.","category":"page"},{"location":"#Developer's-Guide","page":"Home","title":"Developer's Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several tools for developers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/ohno/FiniteDifferenceMatrices.jl.git\ncd FiniteDifferenceMatrices.jl\njulia\njulia> include(\"dev/revice.jl\")\njulia> include(\"dev/test.jl\")\njulia> include(\"dev/docs.jl\")","category":"page"},{"location":"#API-reference","page":"Home","title":"API reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"API/","page":"API reference","title":"API reference","text":"CurrentModule = FiniteDifferenceMatrices","category":"page"},{"location":"API/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"API/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"API/","page":"API reference","title":"API reference","text":"Modules = [FiniteDifferenceMatrices]","category":"page"},{"location":"API/#FiniteDifferenceMatrices.Fornberg1988","page":"API reference","title":"FiniteDifferenceMatrices.Fornberg1988","text":"Fornberg1988[d,n,m]\n\nThis is a foolish implementation of the tables of B. Fornberg, Math. Comp. 51 699-706 (1988) and Wikipedia by hand. This was coded to test the fdcoefficient().\n\nExamples\n\njulia> FiniteDifferenceMatrices.Fornberg1988[:c,1,2]\n1×3 Matrix{Rational{Int64}}:\n -1//2  0//1  1//2\n\njulia> FiniteDifferenceMatrices.Fornberg1988[:c,2,2]\n1×3 Matrix{Rational{Int64}}:\n 1//1  -2//1  1//1\n\n\n\n\n\n","category":"constant"},{"location":"API/#FiniteDifferenceMatrices.fdcoefficient-Tuple{}","page":"API reference","title":"FiniteDifferenceMatrices.fdcoefficient","text":"fdcoefficient(; n::Int=1, m::Int=2, d=:c)\n\nThis function returns a Dict of the finite difference coefficients c_i of\n\nfracmathrmd^n f(x)mathrmdx^n = frac1Delta x^n sum_i c_i f(x+iDelta x) + O(Delta x^m)\n\nThis implementation is based on a post on discourse by @stevengj and this function is tested to return results equivalent to B. Fornberg, Math. Comp. 51 699-706 (1988).\n\nArguments Description\nn order of derivative n\nm order of accuracy m\nd direction, :c central, :f forward, :b backward\n\nExamples\n\nThe coefficients of the central, n=1 and m=2 differences are c_-1 = -12 c_0 = 0 c_1 = 12.\n\nfracmathrmdf(x)mathrmd x = fracf(x+Delta x) - f(x-Delta x)2Delta x + O(Delta x^2)\n\njulia> fdcoefficient(n=1, m=2, d=:c)\nDict{Int64, Rational{Int64}} with 3 entries:\n  0  => 0//1\n  -1 => -1//2\n  1  => 1//2\n\nThe coefficients of the central, n=1 and m=1 differences are c_0 = -1 c_1 = 1.\n\nfracmathrmdf(x)mathrmd x = fracf(x+Delta x) - f(x)Delta x + O(Delta x)\n\njulia> fdcoefficient(n=1, m=1, d=:f)\nDict{Int64, Rational{Int64}} with 2 entries:\n  0 => -1//1\n  1 => 1//1\n\nThe coefficients of the central, n=2 and m=2 differences are c_-1 = 1 c_0 = -2 c_1 = 1.\n\nfracmathrmd^2f(x)mathrmd x^2 = fracf(x+Delta x) - 2f(x) + f(x-Delta x)Delta x^2 + O(Delta x^2)\n\njulia> fdcoefficient(n=2, m=2, d=:c)\nDict{Int64, Rational{Int64}} with 3 entries:\n  0  => -2//1\n  -1 => 1//1\n  1  => 1//1\n\n\n\n\n\n","category":"method"},{"location":"API/#FiniteDifferenceMatrices.fdmatrix-Tuple{Int64}","page":"API reference","title":"FiniteDifferenceMatrices.fdmatrix","text":"fdmatrix(N::Int; n::Int=1, m::Int=2, d=:c, h=0.1)\n\nThis function returns a discrete approximation of a differential operator as a sparse matrix.\n\nArguments Description\nn order of derivative n\nm order of accuracy m\nd direction, :c central, :f forward, :b backward\nh grid spacing Delta x\n\nExamples\n\nThe central, n=1 and m=2 discrete approximation of the differential operator is\n\nfracmathrmdmathrmd x\nsimeq\nfrac12Delta x\nleft(beginarrayccccccc\n   0   1  0  ldots  0  0  0 \n  -1   0  1  ldots  0  0  0 \n   0  -1  0  ldots  0  0  0 \n  vdots  vdots  vdots  ddots  vdots  vdots  vdots \n  0  0  0  ldots   0   1  0 \n  0  0  0  ldots  -1   0  1 \n  0  0  0  ldots   0  -1  0\nendarrayright)\n\njulia> fdmatrix(5, n=1, m=2, d=:c, h=1//1)\n5×5 SparseArrays.SparseMatrixCSC{Rational{Int64}, Int64} with 8 stored entries:\n   ⋅     1//2    ⋅      ⋅     ⋅  \n -1//2    ⋅     1//2    ⋅     ⋅  \n   ⋅    -1//2    ⋅     1//2   ⋅  \n   ⋅      ⋅    -1//2    ⋅    1//2\n   ⋅      ⋅      ⋅    -1//2   ⋅  \n\nThe central, n=1 and m=1 discrete approximation of the differential operator is\n\nfracmathrmdmathrmd x\nsimeq\nfrac1Delta x\nleft(beginarrayccccccc\n  -1   1   0  ldots  0  0  0 \n   0  -1   1  ldots  0  0  0 \n   0   0  -1  ldots  0  0  0 \n  vdots  vdots  vdots  ddots  vdots  vdots  vdots \n  0  0  0  ldots  -1   1   0 \n  0  0  0  ldots   0  -1   1 \n  0  0  0  ldots   0   0  -1\nendarrayright)\n\njulia> fdmatrix(5, n=1, m=1, d=:f, h=1//1)\n5×5 SparseArrays.SparseMatrixCSC{Rational{Int64}, Int64} with 9 stored entries:\n -1//1   1//1    ⋅      ⋅      ⋅  \n   ⋅    -1//1   1//1    ⋅      ⋅  \n   ⋅      ⋅    -1//1   1//1    ⋅  \n   ⋅      ⋅      ⋅    -1//1   1//1\n   ⋅      ⋅      ⋅      ⋅    -1//1\n\nThe central, n=2 and m=2 discrete approximation of the differential operator is\n\nfracmathrmd^2mathrmd x^2\nsimeq\nfrac1Delta x^2\nleft(beginarrayccccccc\n  -2   1   0  ldots  0  0  0 \n   1  -2   1  ldots  0  0  0 \n   0   1  -2  ldots  0  0  0 \n  vdots  vdots  vdots  ddots  vdots  vdots  vdots \n  0  0  0  ldots  -2   1   0 \n  0  0  0  ldots   1  -2   1 \n  0  0  0  ldots   0   1  -2\nendarrayright)\n\njulia> fdmatrix(5, n=2, m=2, d=:c, h=1//1)\n5×5 SparseArrays.SparseMatrixCSC{Rational{Int64}, Int64} with 13 stored entries:\n -2//1   1//1    ⋅      ⋅      ⋅  \n  1//1  -2//1   1//1    ⋅      ⋅  \n   ⋅     1//1  -2//1   1//1    ⋅  \n   ⋅      ⋅     1//1  -2//1   1//1\n   ⋅      ⋅      ⋅     1//1  -2//1\n\n\n\n\n\n","category":"method"},{"location":"API/#FiniteDifferenceMatrices.fdvalue-Tuple{Any, Any}","page":"API reference","title":"FiniteDifferenceMatrices.fdvalue","text":"fdvalue(f, a; n::Int=1, m::Int=2, d=:c, h=0.1)\n\nThis function calculates the differential coefficient f^(n)(a), a value of the derivative function f^(n)=fracmathrmd^n fmathrmdx^n at the point a.\n\nfracmathrmd^n fmathrmdx^n (a) = frac1h^n sum_i c_i f(a+ih) + O(Delta x^m)\n\nExamples\n\njulia> fdvalue(x -> x^2, 1.0)\n2.0000000000000004\n\njulia> (x -> 2*x)(1.0)\n2.0\n\njulia> fdvalue(sin, 0.0)\n0.9983341664682815\n\njulia> fdvalue(sin, 0.0, m=4)\n0.9999966706326067\n\njulia> fdvalue(sin, 0.0, m=6)\n0.9999999928710186\n\njulia> cos(0.0)\n1.0\n\n\n\n\n\n","category":"method"}]
}
